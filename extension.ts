import * as vscode from "vscode";

import { Configuration } from "./src/configuration/configuration";
import { organizeTypes } from "./src/helpers/code-helper";

// #region Functions (3)

export function activate(context: vscode.ExtensionContext)
{
    context.subscriptions.push(vscode.commands.registerCommand('tsco.organize', () => organizeEditor(vscode.window.activeTextEditor, configuration)));
    context.subscriptions.push(vscode.commands.registerCommand('tsco.organizeAll', () => organizeAll(configuration)));

    vscode.workspace.onDidChangeConfiguration(e => configuration = Configuration.getConfiguration())

    vscode.workspace.onWillSaveTextDocument(e =>
    {
        if (e.reason === vscode.TextDocumentSaveReason.Manual &&
            e.document.fileName == vscode.window.activeTextEditor?.document?.fileName &&
            configuration.organizeOnSave)
        {
            organizeEditor(vscode.window.activeTextEditor, Configuration.getConfiguration());
        }
    });
}

function organizeEditor(editor: vscode.TextEditor | undefined, configuration: Configuration) {
    return organize(editor?.document, undefined, configuration);
}

function organize(document: vscode.TextDocument | undefined, targetRange: vscode.Range | undefined, configuration: Configuration & { noApplyEdit?: boolean } = Configuration.getConfiguration())
{
    const ignoreComment1Regex = new RegExp("//\\s*tsco:ignore");
    const ignoreComment2Regex = new RegExp("//\\s*<auto-generated\\s*/>");

    if (document)
    {
        const sourceCode = document.getText(targetRange);

        if (!ignoreComment1Regex.test(sourceCode) &&
            !ignoreComment2Regex.test(sourceCode))
        {
            const organizedSourceCode = organizeTypes(sourceCode, document.fileName, configuration);

            if (organizedSourceCode !== sourceCode)
            {
                let range = targetRange; 
                
                if(!range) { 
                    const start = targetRange?.start || new vscode.Position(0, 0);
                    const end = targetRange?.end || new vscode.Position(document.lineCount, document.lineAt(document.lineCount - 1).text.length);
                    range = new vscode.Range(start, end);
                }
                const edit = new vscode.WorkspaceEdit();

                edit.replace(document.uri, range, organizedSourceCode);

                if(!configuration.noApplyEdit) {
                    return vscode.workspace.applyEdit(edit);
                }

                return edit;
            }
        }
    }
}

function organizeAll(configuration: Configuration)
{
    vscode.workspace.findFiles("**/*.ts", "**/node_modules/**")
        .then(typescriptFiles => typescriptFiles.forEach(typescriptFile => vscode.workspace.openTextDocument(typescriptFile)
            .then(document => vscode.window.showTextDocument(document)
                .then(editor => organizeEditor(editor, configuration) !== null))));
}

// #endregion Functions (3)

// #region Providers (1)

const COMMAND = 'source.fix.tsco';

export class Organizer implements vscode.CodeActionProvider {
    public static readonly providedCodeActionKinds = [
        vscode.CodeActionKind.Source,
        vscode.CodeActionKind.QuickFix,
	];

	public provideCodeActions(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction[] | undefined {
        const organizeFile = this.createSourceAction(document);
        const quickFix = this.createFix(document, range);
        return [
            organizeFile,
            quickFix,
        ]
    }

	private createFix(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction {
		const fix = new vscode.CodeAction(`Reorganize Selected Class Members`, vscode.CodeActionKind.QuickFix);
		fix.edit = organize(document, range, { ...Configuration.getConfiguration(), noApplyEdit: true }) as vscode.WorkspaceEdit;
		return fix;
	}

    private createSourceAction(document: vscode.TextDocument): vscode.CodeAction {
		const action = new vscode.CodeAction('Reorganize Class Members', vscode.CodeActionKind.Source);
		action.command = { command: COMMAND, title: 'Reorganize Class', tooltip: 'This will reorganize the class members in the current file' };
		return action;
	}
}


// #region Variables (1)

let configuration = Configuration.getConfiguration();

// #endregion Variables (1)
